#This is the final gmims dipole code, which finds the coefficients of the two maps, subtracts the monopole/dipole and iterates until the all of the components are smaller than 1% of the total value.

import sys
import numpy as np
import healpy as hp
#import theilsen_bootstrap as ts
import theil_sen_uncertain as ts
import matplotlib.pyplot as plt
from astropy.io import ascii

#pixno=float(sys.argv[1])
lo_in=sys.argv[1]
hi_in=sys.argv[2]
lo_name=sys.argv[3]
hi_name=sys.argv[4]

nside_big=int(sys.argv[5])
nside_small=int(sys.argv[6])

npix_big=hp.nside2npix(nside_big)

subpixel_size=int(hp.nside2npix(nside_big)/hp.nside2npix(nside_small))
print subpixel_size
subpixels=int(hp.nside2npix(nside_small))
print subpixels
#mask_name=sys.argv[5]

def a2t(freq):
    h=6.626068E-34
    k_B=1.3806503E-23
    T_0=2.726

    x=h*freq/(k_B*T_0)
    
    return (np.exp(x)-1.)**2/(x**2*np.exp(x))

gmims0=hp.read_map(hi_in,nest=True)
gmims0=hp.ud_grade(gmims0,nside_out=256,pess=True,order_in='NESTED', order_out='NESTED')
gmims_unseen=np.where(gmims0==hp.UNSEEN)
gmims0[gmims_unseen]=float('NaN')
if hi_name=='stockert':
    gmims0*= 1.55
    gmims0-=2.8
#gmims0/=a2t(1420000000.)

haslam=hp.read_map(lo_in,nest=True)
haslam=hp.ud_grade(haslam,nside_out=256,pess=True, order_in='NESTED',order_out='NESTED')
haslam_unseen=np.where(haslam==hp.UNSEEN)
haslam[haslam_unseen]=float('NaN')
#haslam/=a2t(408000000.)
if lo_name=='stockert':
    haslam *= 1.55
    haslam -= 2.8
elif lo_name=='haslam':
    haslam -= 2.7
elif lo_name=='haslam-wdipole':
    
    t_matrix=np.empty((npix_big,4))
    t_matrix[:,0]=1.0

#set up the template matrix, Nx4 matrix

    for i in range (npix_big):
        t_matrix[i,1:]=hp.pix2vec(nside_big,i,nest=True)

    w_coeffs=np.asarray([8.9,3.2,0.7,-0.8])

    wdipole=np.matmul(t_matrix,w_coeffs)

    hp.mollview(wdipole, nest=True)

    plt.show()

    #exit()
    haslam -= wdipole